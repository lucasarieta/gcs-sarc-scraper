# name: sarc-scraper-ci-cd

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v4
#       - name: Build Docker image
#         run: docker build -t sarc-scraper-ci-cd:latest .
#       - name: Upload to AWS EC2
#         uses: easingthemes/ssh-deploy@main
#         env:
#           SSH_PRIVATE_KEY: ${{secrets.EC2_SSH_KEY}}
#           SOURCE: './'
#           REMOTE_HOST: 'ec2-18-217-171-64.us-east-2.compute.amazonaws.com'
#           REMOTE_USER: 'ec2-user'
#           TARGET: '/home/ec2-user'
#       - name: start application

name: sarc-scraper-ci-cd

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sarc-scraper
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ec2-18-217-171-64.us-east-2.compute.amazonaws.com
          USER: ec2-user
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/sarc-scraper:${{ github.sha }}
            docker stop sarc-scraper || true
            docker rm sarc-scraper || true
            docker run -d --name sarc-scraper -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/sarc-scraper:${{ github.sha }}
          '
